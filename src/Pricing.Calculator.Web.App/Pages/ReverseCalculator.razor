@page "/reverse"

@using Pricing.Calculator.Web.App.Services
@using Pricing.Calculator.Web.App.Models.Response

@inject IReverseCalculationService CalculationService
@inject IAdaptivePricingService AdaptivePricingService

<EditForm Model="@order" OnValidSubmit="@SubmitRequest">

    <ObjectGraphDataAnnotationsValidator />
    <ReverseOrderFormComponent Order="@order" />
    <CalculatedChargesComponent Calculation="@calculation" Status="@status" />

</EditForm>

@code {

    private Calculation? calculation;
    private Models.Request.Reverse.Order order = new Models.Request.Reverse.Order();
    private HistoricAdaptivePricing? adaptivePricing = new HistoricAdaptivePricing();

    private string? status = "Waiting...";

    private async Task SubmitRequest()
    {
        var result = await CalculationService.Calculate(order, default);

        if (result.Successful)
        {
            calculation = (result as OperationResult<Calculation>)?.Data;
            adaptivePricing = await AdaptivePricingService.Get();
        }
        else
        {
            calculation = null;

            var errorResult = result as OperationResult;

            if (errorResult?.Errors == null)
                status = "It looks like something went wrong!";
            else
            {
                var sb = new System.Text.StringBuilder();

                sb.Append($"<p style=\"color:red\">Unsuccesful request.</p>");

                foreach (var entry in errorResult.Errors)
                {
                    foreach (var error in entry.Value)
                    {
                        sb.Append($"<p style=\"color:red\">{entry.Key}: {error}</p>");
                    }
                }

                status = sb.ToString();
            }
        }
    }
}
